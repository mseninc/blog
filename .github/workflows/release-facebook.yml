name: Release Facebook

on:
  workflow_dispatch:
    inputs:
      page_id:
        description: 'The pageId part of /${pageId}/photos URL'
        required: true
        default: 'msenjp'
  push:
    branches:
      - release
      - 317-add-workflow-for-facebook-post

jobs:
  release_facebook:
    runs-on: ubuntu-latest

    environment:
      name: Release

    env:
      RSS_URL: https://mseeeen.msen.jp/rss.xml
      RSS_FILENAME: rss.json
      RSS_CONVERTER: https://api.rss2json.com/v1/api.json?rss_url=
      PAGE_ID: ${{ github.event.inputs.page_id || 'msenjp' }}
      PAGE: https://www.facebook.com/msenjp/

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get data from RSS feed
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            const rssUrl = '${{ env.RSS_CONVERTER }}${{ env.RSS_URL }}';
            const response = await fetch(rssUrl);
            const data = await response.json();

            fs.writeFileSync('${{ env.RSS_FILENAME }}', JSON.stringify(data.items));
        
      - name: Caching Hash
        id: blog-posts-cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.RSS_FILENAME }}
          key: blog-post-${{ hashFiles(env.RSS_FILENAME) }}          
      
      - name: Get latest posts
#        if: ${{ steps.blog-posts-cache.outputs.cache-hit != 'true' }}
        id: latest-data
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const data = fs.readFileSync('${{ env.RSS_FILENAME }}');
            const items = JSON.parse(data)

            let date
            let photoUrl
            for (const item of items) {
              if (!date || new Date(date).getTime() < new Date(item.pubDate).getTime()) {
                date = item.pubDate;
                photoUrl = item.enclosure.link;
              }
            }

            return photoUrl
          result-encoding: string

      - name: Get Facebook page access token
#        if: ${{ steps.blog-posts-cache.outputs.cache-hit != 'true' }}
        id: token
        run: |
          json=$(curl -X GET "https://graph.facebook.com/${{ vars.FACEBOOK_USER_ID }}/accounts?access_token=${{ secrets.FACEBOOK_USER_ACCESS_TOKEN }}")            
          token=$(echo $json | jq -r '.data[].access_token')
          echo "page_access_token=${token}" >> $GITHUB_OUTPUT

      - name: Post data to Facebook
#        if: ${{ steps.blog-posts-cache.outputs.cache-hit != 'true' }}
        run: |
            curl -i -X POST \
              -d "url=https://msen.jp/img/logo.png" \
              -d "published=true" \
              -d "access_token=${{ steps.token.outputs.page_access_token }}" \
              "https://graph.facebook.com/${{ env.PAGE_ID }}/photos" 